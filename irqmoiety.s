
	.export	setupirq

	.include	"pseudo16.inc"
	.include	"memoryconfig.i"
	.import ciatimer_retrieve
	.import ciatimer_store
	.import framecounter
	.import animate_sprite
	.import move_sprite0_horizontally
	.import	scroller_advance
	.import	spritescroller
	.import spritepointer
	.import	scroller_copypos2vic
	.import	circular_flight_spr0
	.import sidMuzakPlay

	;; Here we put the interrupt code. High byte must be $ff. See setupirq!
	interruptTargetSpace = $FF80
	
	.zeropage
irqXsave:	.byte 0
irqYsave:	.byte 0

	.data
	;; Interrupt table. It is assumed that there are exactly four entries!
	.define	IrqsTable	run_action-1,play_muzak-1,copy_scroller_shadow-1,irq_advance_scroller-1
irqTableLO:	.lobytes	IrqsTable
irqTableHI:	.hibytes	IrqsTable
irqTable_pos:	.byte	40,105,201,248

	.bss
irq_dispatch_idx:		; Index to the next interrupt routine.
	;; 	.byte	0
	.res	1

	.code
;;; Setup the interrupt routine by copying the code and setting the IRQ pointer. The interupt must point to an address of $ff?? as we need a black border (top and bottom).
;;; Modifies: A/X
setupirq:
	ldx	#irqroutine_end-irqroutine
@l1:	lda	irqroutine-1,x	; Minus one as DEX and BNE.
	sta	interruptTargetSpace-1,x
	dex
	bne	@l1
	lda	#<interruptTargetSpace
	sta	$FFFE
	lda	#>interruptTargetSpace
	sta	$FFFF
	lda	#$7f
	sta	$dc0d	;disable timer interrupts which can be generated by the two CIA chips
	sta	$dd0d	;the kernal uses such an interrupt to flash the cursor and scan the keyboard,
			;so we better stop it.
	lda	$dc0d	;by reading this two registers we negate any pending CIA irqs.
	lda	$dd0d	;if we don't do this, a pending CIA irq might occur after we finish setting up our irq.
			;we don't want that to happen.
	;; https://www.c64-wiki.com/wiki/Raster_interrupt
	lda	#$7f
	and	$d011		; Set MSB of raster to zero
	sta	$d011
	lda	#50-1		; Top of screen minus one rasterline
	sta	$d012
	;; http://unusedino.de/ec64/technical/project64/mapping_c64.html
	; 53274         $D01A          IRQMASK
	; IRQ Mask Register
	; 
	; Bit 0:  Enable Raster Compare IRQ (1=interrupt enabled)
	; Bit 1:  Enable IRQ to occure when sprite collides with display of
	;   normal
	;         graphics data (1=interrupt enabled)
	; Bit 2:  Enable IRQ to occur when two sprites collide (1=interrupt
	;   enabled)
	; Bit 3:  Enable light pen to trigger an IRQ (1=interrupt enabled)
	; Bits 4-7:  Not used
	lda	#%00000001
	sta	$d01a
	rts

run_action:
	P_inc	framecounter	; Advance frame counter.
	jsr	animate_sprite
	memoryconfig_io
	;; 	jsr	move_sprite0_horizontally
	jsr	circular_flight_spr0
	lda	#7
	sta	$d027
	lda	#$ff
	sta	$d015
	rts

play_muzak:
	memoryconfig_io
	jsr	ciatimer_store
	jsr	sidMuzakPlay
	jsr	ciatimer_retrieve
	rts


	scrollerspritebank = (spritescroller-$c000)/64
copy_scroller_shadow:
	ldx	spritescroller
	ldx	#<scrollerspritebank ; Why '<'?
	stx	spritepointer
	inx
	stx	spritepointer+1
	inx
	stx	spritepointer+2
	inx
	stx	spritepointer+3
	inx
	stx	spritepointer+4
	inx
	stx	spritepointer+5
	inx
	stx	spritepointer+6
	inx
	stx	spritepointer+7
	memoryconfig_io
	;; 	jsr	move_sprite0_horizontally
	jsr	scroller_copypos2vic
	rts

irq_advance_scroller:
	memoryconfig_io
	lda	$d011
	and	#%11110111
	sta	$d011
	memoryconfig_ram
	jsr	scroller_advance
	memoryconfig_io
	lda	$d011
	ora	#%00001000
	sta	$d011
	lda	#$0d+10		; Wait until the end of the scroller (?) and turn the sprites off. Otherwise we get "ghost images" in the upper border...
@l:	cmp	$d012
	bne	@l
	lda	#$0
	sta	$d015
	memoryconfig_ram
	rts

	.code
irqroutine:
	.org	interruptTargetSpace
	pha
	stx	irqXsave
	sty	irqYsave
	jsr	dispatch
	jsr	irq_increment
	;; Now some I/O stuff.
	memoryconfig_io
	asl	$d019		; Acknowledge IRQ.
	ldx	irq_dispatch_idx; Which is the next interrupt routine?
	lda	irqTable_pos,x	; Get the next raster-line position.
	sta	$d012		; Set IRQ @ next position.
	lda	$d011
	and	#%01111111
	sta	$d011
	memoryconfig_ram
	ldy	irqYsave
	ldx	irqXsave
	pla
	rti
	.reloc
irqroutine_end:

irq_increment:
	inc	irq_dispatch_idx
	lda	irq_dispatch_idx
	and	#3
	sta	irq_dispatch_idx
	rts

dispatch:
	ldx	irq_dispatch_idx
	;; Dispatch trick for jmp (...,x):
	;; http://6502.org/tutorials/6502opcodes.html#RTS
	lda	irqTableHI,x
	pha
	lda	irqTableLO,x
	pha
	rts			; JMP (â€¦,x)



	.export	sinustable128
	.export	sinus
	.export cosinus

	;; GHCI
	;; let angles = [i*2*pi/128 | i <- [0..127]]
	;; let sins = map (round . (*) 80 . sin) angles
	;; map (uncurry (flip (-))) $ zip sins $ tail sins
	;; 
;  Prelude Data.List> map (\l -> (head l, length l)) $ group $  map (uncurry (flip (-))) $ zip sins $ tail sins
;  [(4,4),(3,1),(4,3),(3,1),(4,1),(3,2),(4,1),(3,3),(2,1),(3,1),(2,1),(3,1),(2,2),(1,1),(2,1),(1,1),(2,1),(1,1),(0,1),(1,2),(0,4),(-1,2),(0,1),(-1,1),(-2,1),(-1,1),(-2,1),(-1,1),(-2,2),(-3,1),(-2,1),(-3,1),(-2,1),(-3,3),(-4,1),(-3,2),(-4,1),(-3,1),(-4,3),(-3,1),(-4,8),(-3,1),(-4,3),(-3,1),(-4,1),(-3,2),(-4,1),(-3,3),(-2,1),(-3,1),(-2,1),(-3,1),(-2,2),(-1,1),(-2,1),(-1,1),(-2,1),(-1,1),(0,1),(-1,2),(0,4),(1,2),(0,1),(1,1),(2,1),(1,1),(2,1),(1,1),(2,2),(3,1),(2,1),(3,1),(2,1),(3,3),(4,1),(3,2),(4,1),(3,1),(4,3),(3,1),(4,3)]

	.code
;;; Get a sinus value.
;;; Input: A=angle φ
;;; Output: A=sin(φ)
;;; Modifies: A/X
sinus:
	and	#127		; 128 is a "full circle".
	tax
	lda	sinustable128,x
	rts

cosinus:
	clc
	adc	#128/4		; π/2 in radiants...
	and	#127		; 128 is a "full circle".
	tax
	lda	sinustable128,x
	rts

	.feature	force_range

	.data
	.byte	"SINUS"
sinustable128:
	.byte	0,4,8,12,16,19,23,27,31,34,38,41,44,48,51,54,57,59,62,64,67,69,71,72,74,75,77,78,78,79,80,80,80,80,80,79,78,78,77,75,74,72,71,69,67,64,62,59,57,54,51,48,44,41,38,34,31,27,23,19,16,12,8,4,0,-4,-8,-12,-16,-19,-23,-27,-31,-34,-38,-41,-44,-48,-51,-54,-57,-59,-62,-64,-67,-69,-71,-72,-74,-75,-77,-78,-78,-79,-80,-80,-80,-80,-80,-79,-78,-78,-77,-75,-74,-72,-71,-69,-67,-64,-62,-59,-57,-54,-51,-48,-44,-41,-38,-34,-31,-27,-23,-19,-16,-12,-8,-4
